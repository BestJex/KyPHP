<?php
// +----------------------------------------------------------------------
// | [KyPHP System] Copyright (c) 2020 http://www.kuryun.com/
// +----------------------------------------------------------------------
// | [KyPHP] 并不是自由软件,你可免费使用,未经许可不能去掉KyPHP相关版权
// +----------------------------------------------------------------------
// | Author: fudaoji <fdj@kuryun.cn>
// +----------------------------------------------------------------------
/**
 * Created by PhpStorm.
 * Script Name: AddonMiniApi.php
 * Create: 2020/7/29 15:50
 * Description: 小程序应用公共接口类
 * Author: fudaoji<fdj@kuryun.cn>
 */
namespace app\common\controller;

use ky\ErrorCode;
use ky\Helper;

class AddonMiniApi extends BaseCtl
{
    protected $needToken; //是否需要token
    protected $token = '';
    protected $jscode2session = [];
    //protected $openPlatform;
    protected $miniApp;
    protected $miniInfo;
    protected $miniAddonInfo;
    /**
     * @var \app\common\model\Mini
     */
    protected $miniM;
    protected $miniId;
    protected $followInfo;
    /**
     * 是否需要获取授权信息
     * @var bool
     */
    protected $needWxLogin = true;
    /**
     * @var string
     */
    protected $addonName;
    /**
     * @var string
     */
    protected $addonController;
    /**
     * @var string
     */
    protected $addonAction;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if(request()->isPost() || 1){
            $this->miniM = model('common/mini');
            $this->setMiniId();
            $this->setMiniInfo();
            $this->setApp();
            $this->setAddonInfo();

            Helper::$ajax = $this->getAjax();
            $this->checkToken();
            $this->checkLogin();

        }else{
            abort(ErrorCode::CatchException, '非法请求');
        }
    }

    /**
     * 微信授权获取用户信息
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function checkLogin(){
        if($this->jscode2session){
            $this->followInfo = model('MiniFollow')->getOneByMap([
                'mini_id' => $this->miniId,
                'openid' => $this->jscode2session['openid']
            ]);
        }
        if($this->needWxLogin && empty($this->followInfo['headimgurl'])){
            Helper::error(ErrorCode::RedirectAjax, '请进行微信授权登录');
        }
    }

    /**
     * 设置应用信息
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function setAddonInfo(){
        $this->addonName = strtolower($this->request->param('addon'));
        $this->addonController = strtolower($this->request->param('col'));
        $this->addonAction = strtolower($this->request->param('act'));
        $this->miniAddonInfo = model('common/miniAddon')->getOneByMap([
            'addon' => $this->addonName, 'mini_id' => $this->miniId,
        ]);
        if ($this->miniAddonInfo && $this->miniAddonInfo['infos']) {
            $this->miniAddonInfo['infos'] = json_decode($this->miniAddonInfo['infos'], true);
        }else{
            Helper::error(ErrorCode::BadParam, '请先在电脑端进行应用配置');
        }
    }

    /**
     * 校验请求token
     * @author: fudaoji<fdj@kuryun.cn>
     */
    public function checkToken(){
        $this->checkSign();

        if($this->needToken){
            $header = request()->header();
            if(empty($header['token'])){
                Helper::error(ErrorCode::RedirectAjax, 'token缺失');
            }
            $this->token = $header['token'];
            $this->jscode2session = json_decode(controller('mini/mini', 'event')->getRedis()->get($this->token), true);
            if($this->jscode2session){ //续时
                controller('mini/mini', 'event')->getRedis()->setex($this->token, 86400 * 7, json_encode($this->jscode2session));
            }
            if(empty($this->jscode2session)){
                Helper::error(ErrorCode::RedirectAjax, 'token过期');
            }
        }
    }

    /**
     * 设置小程序id
     * Author: fudaoji<fdj@kuryun.cn>
     */
    protected function setMiniId(){
        $this->miniId = input('mid', 0, 'intval');
        if(empty($this->miniId)){
            abort(ErrorCode::CatchException, '非法请求,mid参数丢失');
        }
    }

    /**
     * 设置小程序信息
     * @author fudaoji<fdj@kuryun.cn>
     */
    protected function setMiniInfo() {
        $this->miniInfo = $this->miniM->getOne($this->miniId);
        if(empty($this->miniInfo)){
            abort(ErrorCode::CatchException, '非法请求,小程序不存在');
        }
    }

    /**
     * 设置小程序应用
     * @author fudaoji<fdj@kuryun.cn>
     */
    protected function setApp() {
        $this->miniApp = controller('mini/mini', 'event')->getApp($this->miniInfo);
        //$this->openPlatform = controller('mp', 'event')->getOpenPlatform();
    }

    /**
     * 获取AJAX请求参数
     * @author fudaoji<fdj@kuryun.cn>
     */
    private function getAjax() {
        $json = file_get_contents("php://input");
        return json_decode($json, 1);
    }

    /**
     * 签名验证
     * @author: fudaoji<fdj@kuryun.cn>
     */
    protected function checkSign(){
        if(empty(Helper::$ajax)){
            abort(ErrorCode::ErrorParam, '非法请求');
        }
        $params = Helper::$ajax;
        unset($params['sign']);
        if(count($params) == 0){
            $params_str = '';
        }else{
            //签名步骤一：按字典序排序参数
            ksort($params);
            $params_str = "";
            foreach ($params as $k => $v)
            {
                if($k != "sign"){
                    $params_str .= ($k . "=" . json_encode($v,JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE) . "&");
                }
            }
            $params_str = trim($params_str, "&");
        }
        //签名步骤二：在string后加入KEY
        $params_str .= empty($this->miniAddonInfo['infos']['app_key']) ? config('app_key') : $this->miniAddonInfo['infos']['app_key'];
        //签名步骤三：MD5加密
        $sign = md5($params_str);
        //判断sign
        if($sign !== Helper::$ajax['sign']){
            abort(ErrorCode::ErrorParam, '非法请求');
        }
    }
}