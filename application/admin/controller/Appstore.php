<?php
// +----------------------------------------------------------------------
// | [KyPHP System] Copyright (c) 2020 http://www.kuryun.com/
// +----------------------------------------------------------------------
// | [KyPHP] 并不是自由软件,你可免费使用,未经许可不能去掉KyPHP相关版权
// +----------------------------------------------------------------------
// | Author: fudaoji <fdj@kuryun.cn>
// +----------------------------------------------------------------------

/**
 * Created by PhpStorm.
 * Script Name: Appstore.php
 * Create: 2020/5/17 下午5:10
 * Description: 应用商店
 * Author: fudaoji<fdj@kuryun.cn>
 */

namespace app\admin\controller;

use think\facade\Log;

class Appstore extends Base
{
    public $user = [];
    public $token = '';
    static public $baseUrl = 'https://service.rhaphp.com/';

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if (!empty($user = cookie('official_user'))) {
            $this->user = $user;
            $this->token = $user['token'];
        }
        set_time_limit(0); //防止超时
    }

    /**
     * 升级应用
     * @return mixed|\think\response\Json
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function upgrade()
    {
        if (!$this->token)
            $this->error('你还没有登录应用商店', url('login'));

        if (request()->isPost()) {
            $post_data = input('post.');
            $addon_path = ADDON_PATH . $post_data['addon'] . DS;
            if (!file_exists($addon_path))
                $this->error($post_data['addon'] . '目录不存在');

            $url = self::$baseUrl . "Upgrade/getAppUpgradePack";
            $param = array_merge(['token' => $this->token], input());
            $result = json_decode($res = http_post($url, $param), true);
            if ($res == false)
                $this->error('服务出错，请稍后再试');

            if (isset($result['errcode']) && $result['errcode'] == -1) {
                $this->error($result['errmsg']);
            }

            $zip = new \ZipArchive;
            //备份
            $back_zip_name = env('runtime_path') . $result['name'] . input('version') . '-backup.zip';
            if (!$zip->open($back_zip_name, \ZipArchive::CREATE | \ZipArchive::OVERWRITE)) {
                $this->error('无法创建备份压缩包');
            }
            $this->addFileToZip($addon_path, $zip);
            $zip->close();

            $tem_file = env('runtime_path') . $result['name'].$result['version'].'-'.time() . '.tmp';
            file_put_contents($tem_file, $res);

            $res = $zip->open($tem_file);
            if ($res === TRUE) {
                $zip->extractTo(ADDON_PATH);
                $zip->close();
            } else {
                $this->error('解压失败，请检查是否有写入权限');
            }

            if (is_file($addon_path . 'upgrade.sql')) {
                $sql = file_get_contents($addon_path . 'upgrade.sql');
                $sql = str_replace("\r", "\n", $sql);
                $sql = explode(";\n", $sql);
                $prefix = config('database.prefix');
                $orginal = 'rh_';
                $sql = str_replace(" `{$orginal}", " `{$prefix}", $sql);
                foreach ($sql as $value) {
                    $value = trim($value);
                    if (empty($value)) continue;
                    if (substr($value, 0, 12) == 'CREATE TABLE') {
                        try {
                            model('addons')->execute($value);
                        } catch (\Exception $e) {
                            $res = $zip->open($back_zip_name);
                            if ($res === TRUE) {
                                $zip->extractTo(ADDON_PATH);
                                $zip->close();
                            }
                            $this->error($e->getMessage());
                        }
                    } else {
                        try {
                            model('addons')->query($value);
                        } catch (\Exception $e) {
                            $res = $zip->open($back_zip_name);
                            if ($res === TRUE) {
                                $zip->extractTo(ADDON_PATH);
                                $zip->close();
                            }
                            $this->error($e->getMessage());
                        }
                    }
                }
                @unlink($addon_path . 'upgrade.sql');
            }

            model('addons')->save(['status' => 0], ['addon' => $post_data['addon']]);
            $this->success('升级成功，应用正在重新启用...');
        }
        $url = self::$baseUrl . "Upgrade/getUpgradeApp";
        $ads = json_decode(http_post($url, ['token' => $this->token]), true);
        $lists = [];
        if (!empty($ads)) {
            foreach ($ads as $v) {
                $addon = model('addons')->getOneByMap(['addon' => $v['name']], 'name,addon,version,author,logo');
                if(!empty($addon)){
                    if ($v['version'] > $addon['version']) {
                        $addon['new_version'] = $v['version'];
                        $addon['update_time'] = $v['update_time'];
                        $addon['app_id'] = $v['app_id'];
                        $lists[] = $addon;
                    }
                }
            }
        }

        return $this->show(['lists' => $lists]);
    }

    /**
     * 将文件添加到压缩包中
     * @param $path
     * @param $zip
     * Author: fudaoji<fdj@kuryun.cn>
     */
    private function addFileToZip($path, $zip)
    {
        $handler = opendir($path);
        while (($filename = readdir($handler)) !== false) {
            if ($filename != "." && $filename != "..") {
                if (is_dir($path . DS . $filename)) {
                    $this->addFileToZip($path . DS . $filename, $zip);
                } else {
                    $zip->addFile($path . DS . $filename);
                }
            }
        }
        @closedir($path);
    }

    /**
     * 下载APP
     * @return \think\response\Json
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function download()
    {
        $data = input();
        $url = self::$baseUrl . "publics/getAppInfo";
        $result = json_decode(http_post($url, ['id' => $data['app_id']]), true);
        if (empty($result))
            $this->error('没有找到此应用');

        if (!isset($result['type_id']) && empty($result['type_id']))
            $this->error('类型不符，无法继续完成');

        if ($result['type_id'] == 1) {
            $install_path = ADDON_PATH;
        } elseif ($result['type_id'] == 2) {
            $install_path = MINIAPP_PATH;
        }
        $app_install_path = $install_path . $result['name'] . DS;
        if (file_exists($app_install_path))
            $this->error($result['name'] . '目录已经存在或者您已经安装过【' . $result['title'] . '】，如果您要重新安装，请先卸载此应用');

        $url = self::$baseUrl . 'Business/download';
        $data['token'] = $this->token;
        $result2 = http_post($url, $data);
        if ($result2 == false)
            $this->error('服务出错，请稍后再试');

        $tem_file = env('runtime_path') . $result['name'].$result['version'].'-'.time(). '.tmp';
        file_put_contents($tem_file, $result2);
        $zip = new \ZipArchive;
        $res = $zip->open($tem_file);
        if ($res === TRUE) {
            $zip->extractTo($install_path);
            $zip->close();
            @unlink($tem_file); //删除临时压缩包
            $this->success('下载成功，正在跳转安装界面。。。', '', ['type' => $result['type_id']]);
        } else {
            $this->error('解压失败，请检查是否有写入权限');
        }
    }

    /**
     * 应用信息
     * @return mixed
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function appInfo()
    {
        $url = self::$baseUrl . "publics/getAppInfo";
        $result = json_decode(http_post($url, input()),true);
        $assign = ['info' => $result];
        return $this->show($assign);
    }

    /**
     * 登录
     * @return mixed
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function login()
    {
        if (request()->isPost()) {
            $data = input('post.');
            $url = self::$baseUrl . "account/login";
            $result = http_post($url, $data);
            if ($result === false)
                $this->error('系统繁忙，请稍后再试');

            $result = json_decode($result, true);
            if (is_array($result) && !empty($result)) {
                if ($result['errcode'] != 0) {
                    $this->error($result['errmsg']);
                }
                $_C = $result;
                unset($_C['errmsg']);
                cookie('official_user', $_C);
                $this->success($result['errmsg']);
            }
        } else {
            return $this->show(['menu_title' => '用户登录']);
        }
    }

    /**
     * 退出
     * Author: fudaoji<fdj@kuryun.cn>
     */
    public function logout()
    {
        cookie('official_user', null);
        $this->redirect('index');
    }

    public function index($type = 1, $cate = 0, $page = 1, $title = '')
    {
        $url = self::$baseUrl . "Business/getUserInfo";
        $result = json_decode(http_post($url, ['token' => $this->token]), true);
        if ($result && isset($result['errcode']) && $result['errcode'] != -1)
            $this->user['balance'] = isset($result['user']['balance']) ? $result['user']['balance'] : '';
        if ($type2 = input('type2')) {
            $type = $type2;
        }
        if ($page <= 0) $page = 1;
        $this->getApps();
        $this->assign('title', $title);
        $this->assign('page', $page);
        $this->assign('type', $type);
        $this->assign('cate_id', $cate);
        $this->assign('user', $this->user);
        $this->assign('token', $this->token);
        return $this->show();
    }

    public function getApps()
    {
        $url = self::$baseUrl . "publics/getApps";
        $result = json_decode(http_post($url, input()), true);
        $type = [];
        $cate = [];
        $apps = [];
        if (!empty($result) && is_array($result)) {
            if (isset($result['type_cate']['type'])) {
                $type = $result['type_cate']['type'];
            }
            if (isset($result['type_cate']['cate'])) {
                $cate = $result['type_cate']['cate'];
            }
            if (isset($result['apps'])) {
                $apps = $result['apps'];
            }
        }

        $this->assign('type', $type);
        $this->assign('cate', $cate);
        $this->assign('apps', $apps);
    }
}